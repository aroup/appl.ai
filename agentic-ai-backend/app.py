from flask import Flask, request, jsonify
from flask_cors import CORS, cross_origin
import base64
from pdf2image import convert_from_path
from io import BytesIO
from openai import OpenAI
from swarm import Swarm, Agent
import os
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv('OPENAI_API_KEY')

openai_client = OpenAI(api_key=api_key)

client = Swarm(openai_client)

app = Flask(__name__)
cors = CORS(app, resources={r"/*": {"origins": "*"}})
app.config['CORS_HEADERS'] = 'Content-Type'

def pdf_to_images(pdf_path):
    return convert_from_path(pdf_path, fmt='tiff')


def transfer_to_cover_letter_agent():
    print("Handing off to cover letter agent")
    return cover_letter_agent


def resume_reviewer_instructions(context_variables):
    return f"""You are a personalized resume reviewer tasked with analyzing and extracting information from a person's CV (provided as images). Your goal is to carefully review each line of the CV and organize the extracted information in a clear, structured format.
                Instructions:

                Focus Areas for Extraction:

                Personal Information:
                - Name
                - Profession
                - Contact Details (phone number, address, email)
                - Links (LinkedIn, GitHub, personal website, etc.)

                Skills:
                If multiple skillsets are listed, group them separately based on categories or themes.
                Experience:
                For each role, include:
                - Company Name
                - Position/Title
                - Start Date and End Date
                - List of Duties/Responsibilities (retain the original bullet points).
                If there are multiple experiences, group them individually.

                Education:
                Include:
                - University/Institution Name
                - Subject or Field of Study
                - CGPA (if mentioned).

                Achievements:
                - Highlight specific accomplishments noted in the CV.

                Projects:
                Extract project details, ensuring clarity in descriptions.

                Output Requirements:

                Generate a structured text document containing all extracted information.
                Use your own words when summarizing details where necessary, but do not alter bullet points under the "Experience" section.
                Maintain a professional and organized format.
                Don't add anything other than the parsed CV in the output.


                Objective:
                The goal is to create a clean, well-organized text document that accurately reflects the information from the CV, ready for further use by a cover letter writing agent."""


resume_reviewer_agent = Agent(
    model="gpt-4o",
    name = "Resume Reviewer",
    functions = [transfer_to_cover_letter_agent],
    instructions = resume_reviewer_instructions
)


def cover_letter_agent_instructions(context_variables):
    job_description = context_variables["job_description"]
    feedback = "No previous feedback provided."
    if 'feedback' in context_variables:
        feedback = context_variables["feedback"]
    
    previous_cover_letter = "No previously generated cover letter"
    if 'previous_cover_letter' in context_variables:
        previous_cover_letter = context_variables["previous_cover_letter"]
    
    return f"""You are a professional cover letter writer. You are provided with complete information about an applicant and a job description for a position in a company.

                Details about the job description: {job_description}
                
                Previous cover letter generated by you: {previous_cover_letter}
                
                Feedbacks from a reviewer: {feedback}

                Instructions:

                With Feedback and Cover letter Updates:
                - If feedback from other agents and a previously generated cover letter are provided, update the cover letter based on the feedback to craft the cover letter.

                Without Feedback:
                - If feedback is not provided, use the provided CV and the job description to write the cover letter.

                Requirements:
                - Omit the applicant's phone number and email address using the CV information provided by the "Resume Reviewer" agent.
                - If there's a requirement needed in the job description, but the CV information doesn't have it: skip the requirement and don't put any information related to that in the cover letter.
                - Include the company name from the job description directly in the cover letter to ensure no placeholders.
                - Craft a professional, tailored cover letter highlighting the applicant's experience, skills, and leadership qualities.
                - Ensure the cover letter is between 250 and 400 words long.
                - Use proper formatting and write in a natural, human-like tone without compromising quality.
                - Do not output anything other than the completed cover letter in the response. 

                Objective:
                - The goal is to produce a polished, professional cover letter that effectively demonstrates the applicant's suitability for the role, aligning their profile with the job requirements in a way that feels authentic and engaging.
                - No place holders for filling up later.
                - Don't have the date in the cover letter
                - No output other than the cover letter in the start or in the end.
                - Just address the Hiring Manager by Dear Hiring Manager
                - For company name, take the company name from the job description.
            """


def transfer_to_quality_agent():
    print("Handing off to quality improvement agent")
    return quality_improvement_agent

cover_letter_agent = Agent(
    model="gpt-4o",
    name="Cover letter writer",
    instructions = cover_letter_agent_instructions,
    function=[transfer_to_quality_agent]
)


def quality_agent_instructions(context_variables):
    resume_content = context_variables.get("resume_content", "No resume provided")
    job_description = context_variables.get("job_description", "No job description provided")
    cover_letter = context_variables.get("cover_letter", "No cover letter provided")
    
    return f"""You are a fact-checking cover letter reviewer. Your primary task is preventing hallucinations and ensuring factual accuracy.

                Context:
                RESUME: {resume_content}
                JOB_DESCRIPTION: {job_description}
                COVER_LETTER: {cover_letter}

                Verification Process:
                1. Strict Fact Check (90%):
                   - Compare each statement against resume word-by-word
                   - Reject ANY claim not explicitly in resume
                   - Flag ALL unsupported/exaggerated statements
                   - Make sure that the previous experiences are not fabricated.
                   
                2. Job Match (10%):
                   - Verify company/position accuracy
                   - Only include skills listed in resume
                   

                Give a list of feedbacks as bullets points to fix the generated cover letter.
                Don't output anything other than the feedbacks.
                If there is no wrong information, just print "no feedback"
                """

quality_improvement_agent = Agent(
    model="gpt-4o",
    name="Quality Fact Checker",
    instructions=quality_agent_instructions,
    functions=[transfer_to_cover_letter_agent]
)

@app.route("/")
@cross_origin(origin="*")
def hello_world():
    response = jsonify({"coverLetter": "Hello world!"})
    return response;
    


@app.route("/cover-letter", methods=["POST"])
@cross_origin(origin="*")
def get_cover_letter():
    f = request.files['resume']
    f.save("f.filename")
    job_description = request.form.get('jd')
    images = pdf_to_images("f.filename")
    images_encoded = []
    for image in images:
        buffered = BytesIO()
        image.save(buffered, format="JPEG")
        img_str = base64.b64encode(buffered.getvalue()).decode('utf-8')
        images_encoded.append(img_str)

    if os.path.exists('f.filename'):
        os.remove('f.filename')
    
    starting_agent = resume_reviewer_agent

    starting_messages = [
        {
            "role": "user",
            "content": [
                {
                    "type": "image_url", 
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{image}",
                        "detail": "low"
                    }
                } for image in images_encoded
            ]
        }
    ]

    messages = starting_messages


    response = client.run(
                agent=starting_agent,
                messages=starting_messages,
                context_variables= {},
                stream=False,
                debug=False,
    )

    resume_content = response.messages[-1]["content"]

    messages.extend(response.messages)

    next_agent = response.agent

    cover_letter_response = client.run(
                agent=next_agent,
                messages=messages,
                context_variables={"job_description": job_description},
                stream=False,
                debug=False,
    )

    current_letter = cover_letter_response.messages[-1]["content"]

    messages.extend(cover_letter_response.messages)
    
    next_agent = cover_letter_response.agent

    quality_response = client.run(
        agent=next_agent,
        messages=messages,
        context_variables={
            "resume_content": resume_content,
            "job_description": job_description,
            "cover_letter": current_letter
        },
        stream=False,
        debug=False
    )

    feedback = quality_response.messages[-1]["content"]

    messages.extend(quality_response.messages)

    next_agent = quality_response.agent

    cover_letter_response_2 = client.run(
        agent=next_agent,
        messages=messages,
        context_variables={"job_description": job_description, "previous_cover_letter": current_letter, "feedback": feedback },
        stream=False,
        debug=False
    )
    
    best_version = cover_letter_response_2.messages[-1]["content"]

    # print(cover_letter_response.messages[-1]["content"])
    response = jsonify({"coverLetter": best_version})
    return response;
    